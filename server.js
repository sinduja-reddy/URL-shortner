 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();
var mongo = require('mongodb');
var mongoose = require('mongoose');
mongoose.Promise = global.Promise;

mongoose.connect(process.env.MONGO_URI);
var db = mongoose.connection;

db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', function() {
  // we're connected!

});
var urlSchema = mongoose.Schema({
  original_url: String,
  shortcode:{ type: Number, index:true}
});

urlSchema.index({ shortcode: 1 });

var UrlEntry = mongoose.model('UrlEntry', urlSchema);


if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })

app.get("/new/*", function (req, res) {
  let url = req.params[0];
if (isValidUrl(url)) {  
  isDuplicate(url).then(function(shortCode) {
      if (shortCode) {
        res.status(200).json({
          error: 'URL already exists in the database.'
        });
      } else {
        // If it's not a duplicate, we insert a new document here.
        insertNew(url).then(function(insertedDocument) {  // save() gives us the inserted document to use
          if (!insertedDocument) {
            res.status(500).json({ error: 'Unknown error' }); // Something failed for some reason.
          } else {
            res.status(200).json({'orginal_url':url,short_url:req.protocol+'//'+req.hostname+':'+ getPort()+'/'+insertedDocument.shortcode}); // We return the shortened URL
          }
      });
      }
  });
}else {
    res.status(500).json({ error: 'Invalid URL format.' });
  }
});

function isValidUrl(url) {
  // Must comply to this format () means optional:
  // http(s)://(www.)domain.ext(/)(whatever follows)
  let regEx = /^https?:\/\/(\S+\.)?(\S+\.)(\S+)\S*/;
  return regEx.test(url);
}
function isDuplicate(url) {
  return UrlEntry
    .findOne({ original_url: url })
    .then(function(doc) {
      return doc ? doc.shortcode : false;
    });
}
function getPort() {
  return process.env.PORT;
}
function getShortCode() {
  return UrlEntry
    .find()  // We search without criteria
    .sort({ shortCode: -1 }) // We sort by shortCode DESCENDING
    .limit(1)  // We only return the FIRST
    .select({ _id: 0, shortCode: 1 }) // We only return the shortCode field
    .then(function(docs){
      // If a document is found, we return it's shortCode plus one,
      // otherwise, we return 0, as it means there are no documents,
      // and this is the first
      return docs.length === 1 ? docs[0].shortcode + 1 : 0;
    });
}
function insertNew(url) {
  // We get a new code from getShortCode first
  // It returns a promise as it's an asynchronous action
  return getShortCode().then(function(newCode){
    // We create a new UrlEntry using the mongoose model
    let newUrl = new UrlEntry({ original_url: url, shortcode: newCode });
    // We return the promise generated by save()
    return newUrl.save();
  });
}
// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

